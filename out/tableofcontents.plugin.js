// Generated by CoffeeScript 1.4.0
var TableofcontentsItem,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

TableofcontentsItem = (function() {

  function TableofcontentsItem(text, id, parent) {
    this.text = text;
    this.id = id;
    this.parent = parent;
    this.children = [];
    if (this.parent != null) {
      parent.children.push(this);
    }
  }

  TableofcontentsItem.prototype.add = function(text, id) {
    var child;
    return child = new TableofcontentsItem(text, id, this);
  };

  TableofcontentsItem.prototype.text = function() {
    return this.text || null;
  };

  TableofcontentsItem.prototype.id = function() {
    return this.id || null;
  };

  TableofcontentsItem.prototype.submenu = function() {
    return this.children;
  };

  return TableofcontentsItem;

})();

module.exports = function(BasePlugin) {
  var TableofcontentsPlugin, jsdom;
  jsdom = require('jsdom');
  return TableofcontentsPlugin = (function(_super) {

    __extends(TableofcontentsPlugin, _super);

    function TableofcontentsPlugin() {
      return TableofcontentsPlugin.__super__.constructor.apply(this, arguments);
    }

    TableofcontentsPlugin.prototype.name = 'tableofcontents';

    TableofcontentsPlugin.prototype.config = {
      documentExtensions: ["html"],
      requireMetadata: false,
      requiredMetadataField: 'toc',
      addHeaderIds: true,
      headerSelectors: 'h2,h3,h4,h5',
      rootHeaderLevel: 2
    };

    TableofcontentsPlugin.prototype.locale = {
      parsingTocHeaders: "Parsing ToC headers: ",
      buildingToc: "Building ToC: "
    };

    TableofcontentsPlugin.prototype.buildTableofcontents = function(window, headers) {
      var config, currentItem, currentLevel, header, headerText, key, level, tableofcontents, value, _i, _len;
      config = this.config;
      currentLevel = config.rootHeaderLevel - 1;
      tableofcontents = new TableofcontentsItem;
      currentItem = tableofcontents;
      for (key = _i = 0, _len = headers.length; _i < _len; key = ++_i) {
        value = headers[key];
        header = headers.item(key);
        level = parseInt(header.tagName.charAt(1), 10);
        if (config.addHeaderIds) {
          if (!header.id) {
            headerText = header.innerHTML;
            header.id = headerText.replace(/[^a-zA-Z0-9]/g, '-').replace(/^-/, '').replace(/-+/, '-');
          }
        }
        if (level > currentLevel) {
          while (level > (currentLevel + 1)) {
            currentItem = currentItem.add("", "");
            currentLevel++;
          }
          currentLevel++;
        } else if (level === currentLevel) {
          currentItem = currentItem.parent;
        } else if (level < currentLevel) {
          while (level < currentLevel) {
            currentItem = currentItem.parent;
            currentLevel--;
          }
          currentItem = currentItem.parent;
        }
        currentItem = currentItem.add(header.innerHTML, header.id);
      }
      return tableofcontents;
    };

    TableofcontentsPlugin.prototype.renderBefore = function(opts, next) {
      var config, documents, locale;
      documents = this.docpad.getCollection(this.config.collectionName || 'documents');
      config = this.config;
      locale = this.locale;
      documents.forEach(function(document) {
        var requiredMetadataFieldValue, tableOfContents;
        tableOfContents = (document.tableOfContents != null) || [];
        document.set({
          tableOfContents: tableOfContents
        });
        if (config.requireMetadata) {
          requiredMetadataFieldValue = (document[config.requiredMetadataField] != null) || [];
          return document[config.requiredMetadataField] = requiredMetadataFieldValue;
        }
      });
      return next();
    };

    TableofcontentsPlugin.prototype.renderDocument = function(opts, next) {
      var config, content, docpad, document, extension, file, locale, me, templateData;
      extension = opts.extension, templateData = opts.templateData, file = opts.file, content = opts.content;
      me = this;
      docpad = this.docpad;
      config = this.config;
      locale = this.locale;
      document = templateData.document;
      if (file.type === 'document' && __indexOf.call(config.documentExtensions, extension) >= 0) {
        if (!config.requireMetadata || document[config.requiredMetadataField]) {
          docpad.log('debug', locale.parsingTocHeaders + document.name);
          return jsdom.env({
            html: "<html><body>" + opts.content + "</body></html>",
            features: {
              QuerySelector: true
            },
            done: function(err, window) {
              var headers, toc;
              if (err) {
                return next(err);
              }
              headers = window.document.querySelectorAll(config.headerSelectors);
              if (headers.length === 0) {
                return next();
              }
              docpad.log('debug', locale.buildingToc + document.name);
              toc = me.buildTableofcontents(window, headers);
              if (config.addHeaderIds) {
                opts.content = window.document.body.innerHTML;
              }
              document.tableOfContents = toc.submenu();
              return next();
            }
          });
        } else {
          return next();
        }
      } else {
        return next();
      }
    };

    return TableofcontentsPlugin;

  })(BasePlugin);
};
